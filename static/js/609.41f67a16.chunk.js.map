{"version":3,"file":"static/js/609.41f67a16.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport googleSendFormResponse from \"../../service/googleform\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    if (Object.values(errors).every((error) => error === \"\")) {    \r\n      // Replace these with actual values\r\n      const googleFormURL = \"https://docs.google.com/forms/d/e/1FAIpQLSfPAO5zK7nfuBVr2RTjMo3z1geL2JWpLViymnfD3D2_d-sx6g/formResponse\";\r\n      const formData = {\r\n        \"entry.788029587\": values.name,\r\n        \"entry.2111208960\": values.email,\r\n        \"entry.402612284\": values.message,\r\n      };\r\n    \r\n      const iframe = document.createElement(\"iframe\");\r\n  iframe.style.display = \"none\";\r\n  iframe.name = \"hidden_iframe\";\r\n  document.body.appendChild(iframe);\r\n\r\n  // Add load event listener to the iframe\r\n  iframe.onload = () => {\r\n    notification.success({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n    setFormState({ values: { ...initialValues }, errors: { ...initialValues } });\r\n    document.body.removeChild(iframe);\r\n  };\r\n\r\n  // Create a form to submit to the iframe\r\n  const form = document.createElement(\"form\");\r\n  form.setAttribute(\"method\", \"POST\");\r\n  form.setAttribute(\"action\", googleFormURL);\r\n  form.setAttribute(\"target\", \"hidden_iframe\"); // Submit to the iframe\r\n  form.style.display = \"none\";\r\n\r\n  // Append input fields with data\r\n  Object.keys(formData).forEach((key) => {\r\n    const input = document.createElement(\"input\");\r\n    input.setAttribute(\"type\", \"hidden\");\r\n    input.setAttribute(\"name\", key);\r\n    input.setAttribute(\"value\", formData[key as keyof typeof formData]);\r\n    form.appendChild(input);\r\n  });\r\n\r\n  document.body.appendChild(form);\r\n  form.submit(); // Submit the form\r\n\r\n  // Optional: Clean up form after submission\r\n  document.body.removeChild(form);\r\n}\r\n    };\r\n    \r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(145, 193, 31);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","_useForm","_useState","useState","_objectSpread","_useState2","_slicedToArray","formState","setFormState","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","formData","iframe","form","wrap","_context","prev","next","preventDefault","prevState","Object","every","error","document","createElement","style","display","body","appendChild","onload","notification","success","description","removeChild","setAttribute","keys","forEach","key","input","submit","stop","_x","apply","arguments","handleChange","persist","_event$target","target","value","_defineProperty","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}